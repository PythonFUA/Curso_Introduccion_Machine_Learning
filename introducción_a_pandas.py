# -*- coding: utf-8 -*-
"""Introducción a PANDAS

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ii2OaGTFydG2V18twSN7GMmgthzS3ivp

<p><img alt="logo.fua" height="150px" src='https://drive.google.com/uc?export=view&id=1s0UktWjCsp8F6Q6EmCjfofwVYH_1tWVE' align="left" hspace="10px" vspace="5px"></p>

<h1><center><font size="6px"> <strong>INTRODUCCIÓN A PANDAS </font> </strong></center></h1>

#<center> <font size="4.5" >**FACULTAD DE CIENCIAS Y HUMANIDADES**<center>

# **Instalación de módulos**

Para instalar el módulo, todo lo que necesita es:
"""

#!pip install pandas

"""Para actualizarlo a la versión más actualizada:"""

#!pip install --upgrade pandas

"""Si quieres instalar una versión específica"""

#!pip install pandas==0.9.0

"""# **Importación de módulos**"""

import pandas as pd
import numpy as np

"""# **Dataset**

Vamos a trabajar con el famoso [Titanic dataset](https://www.kaggle.com/c/titanic/data). Estos son los campos disponibles:

---
- `passengerId`: Un ID numérico asignado a cada pasajero
- `survived`: Si el pasajero sobrevivió (1), o no (0)
- `pclass`: La clase en la que estaba el pasajero
- `nombre`: el nombre del pasajero
- `Sex`: El género del pasajero - hombre o mujer
- `Age`: La edad del pasajero (incluye valores fraccionarios)
- `Sibsp`: El número de hermanos y cónyuges que el pasajero tenía a bordo
- `Parch`: El número de padres e hijos que el pasajero tenía a bordo
- `Ticket`: El número de billete del pasajero
- `Tarifa`: Cuánto pagó el pasajero por el billete
- `Cabin`: La cabina en la que estaba el pasajero
- `Embark`: Donde el pasajero embarcó en el Titanic

---

# **Importar datos desde una url**

Ruta de enlace desde el drive:

https://drive.google.com/file/d/1ZLtB26KdWOAGeHw3CP-Dzi43tibZIOmG/view?usp=sharing


Se copia solamente el Id, esto es:



https://drive.google.com/uc?id=1ZLtB26KdWOAGeHw3CP-Dzi43tibZIOmG
"""

#url= "https://drive.google.com/uc?id=1ZLtB26KdWOAGeHw3CP-Dzi43tibZIOmG"
#titanic=pd.read_csv(url) #Para leer archivos en formatos xlsx, usamos pd.read_excel
#titanic.tail(2)

"""# **Importar archivos desde el drive:**

Autorización de acceso a Colab
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

#Ingresamos la ruta de acceso a los datos
titanic = pd.read_csv("/gdrive/MyDrive/Colab Notebooks/INTRODUCCIÓN AL MACHINE LEARNING/titanic.csv")
titanic

"""<center>





<img src="https://drive.google.com/uc?id=1xUtKXEOFO0BZRYJvE8v-5zraAGMX11uu" width="300px" height="150">
</center>

## Introducción a pandas
`pandas` es un paquete construido sobre `numpy`. El objeto principal de este paquete es el **DataFrame**, que son conjuntos de datos multidimensionales con etiquetas de fila y columna. Además de ofrecer una interfaz para datos etiquetados, pandas también tiene potentes funciones de manipulación de datos.


Las principales características de esta librería son:

- Define nuevas estructuras de datos basadas en los arrays de la librería NumPy pero con nuevas funcionalidades.
- Permite leer y escribir fácilmente ficheros en formato CSV, Excel y bases de datos SQL.
- Permite acceder a los datos mediante índices o nombres para filas y columnas.
- Ofrece métodos para reordenar, dividir y combinar conjuntos de datos.

- Realiza todas estas operaciones de manera muy eficiente.
- Tipos de datos de Pandas
- Pandas dispone de tres estructuras de datos diferentes:

    + Series: Estructura de una dimensión.
    + DataFrame: Estructura de dos dimensiones (tablas).
    + Panel: Estructura de tres dimensiones (cubos).
Estas estructuras se construyen a partir de arrays de la librería NumPy, añadiendo nuevas funcionalidades
"""

# Nombre de las columnas en el dataset
titanic.columns

# Tipos de datos y cantidad de valores nulos en el conjunto de datos
titanic.info()

#Otra forma de ver los valores nulos por columna
titanic.isnull().sum()

#Otra forma de ver el tipo de datos
titanic.dtypes

#ver las primeras dos filas
titanic.head()

#ver las últimas dos filas
titanic.tail(2)

#tamaño del Dataframe (filas, columnas)
titanic.shape

#Nombre de las columnas
titanic.columns

# Información sobre las columnas numéricas
titanic.describe()

#Valores únicos por columna excluyendo los nulos
titanic.nunique()

# Valores únicos por columna, incluidos los nulos
titanic.nunique(dropna=False)

# Counting
titanic.count()

#Información sobre las columnas categoricas 
titanic.describe(include = object)

# Valores únicos de la columna "Embarcado''
titanic['Embarked'].unique()

# Número de registros que tenemos por categoría de la columna 'Embarcado' sin valores nulos
titanic['Embarked'].value_counts()

# Número de registros que tenemos por categoría de la columna 'Embarcado' con valores nulos
titanic['Embarked'].value_counts(dropna=False)

"""# **Cambiar el nombre de las columnas**"""

titanic.columns = ['Passenger_Id', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',
       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']
titanic = titanic.rename(columns={'Passenger_Id':'Passenger_Id'})
titanic.head()

#filtros
titanic[(titanic['Embarked']=='S') & (titanic['Sex']=='female')][['Name','Age']].head(3)

#Ordenar columnas de manera ascedente o descendente
titanic.sort_values("Age",ascending=False)

#Ordene titanic primero por edad (ascendente) y luego por clase (descendente)
titanic.sort_values(['Age', 'Pclass' ], ascending=[True, False])

#para selecionar una columna
titanic["Pclass"]

#para seleccionar varias columnas
titanic[["Sex","Age"]]

"""# **Filtros**"""

#pasajeros que tienen más de 60 años
edad_adultos = titanic[titanic['Age']>60]
edad_adultos

#pasajeros que tienen más de 60 años y viajan en primera clase
titanic[(titanic['Age']>60) & (titanic['Pclass']==1)]    #podemos usar .shape para determinar el tamaño

#para seleccionar fila 10 a 15 y desde la columna PassengerId hasta la columna Age
titanic.loc[10:15,'Passenger_Id':'Age']

#para seleccionar fila 10 a 15 y desde la columna PassengerId hasta la columna Age
titanic.iloc[10:15,0:5]

#para seleccionar solamente filas
titanic[50:55]

#aplicamos filtro y selecionamos cierto rango de filas
titanic[(titanic['Age'] > 18) & (titanic['Age'] < 50) & (titanic['Sex']=='female')][10:20]

titanic[(titanic["Pclass"]==1) | (titanic["Survived"]==0)]
titanic.Cabin

#media de las edades
titanic['Age'].mean()

"""# **Agrupación**"""

#agrupar por sex
titanic.groupby('Sex').size()

#agrupas y aplicar funciones
titanic.groupby('Sex').agg({'Age':['min','mean','max']})

titanic.groupby(['Sex','Survived']).agg({'Fare':'count','Age':'mean'}).reset_index()

titanic.describe(include=object)

"""### `crosstab()`

La función pandas.crosstab devuelve la tabla de contingencia resultante de cruzar dos o más campos de un dataframe.
"""

pd.crosstab(titanic['Sex'], titanic['Pclass'])

"""## **Tablas dinámicas**

Son como las tablas dinámicas de Excel. Aquí la utilizamos para ver la edad media de los pasajeros, segregada por clase y género:
"""

titanic.pivot_table(values='Age',index='Sex',columns='Pclass', aggfunc=np.mean)

"""En el conjunto de datos una primera pregunta puede ser cuál es el porcentaje de los pasajeros en función de su clase."""

titanic.pivot_table('Survived', 'Pclass')

# El resultado anterior muestra los porcentajes de supervivencia por clase, pero puede que sea más interesante 
#obtener el total.
titanic.pivot_table('Survived', 'Pclass',aggfunc=np.sum)

titanic.columns

titanic.pivot_table('Survived', ['Sex', 'Parch'], 'Pclass',aggfunc=np.sum)

"""# **Validar datos duplicados**"""

df_tickets = titanic.groupby('Ticket').size().reset_index().rename(columns={0:'count'})
df_tickets

df_tickets.sort_values(by='count',ascending=False)

titanic[titanic['Ticket']=='347082']

"""### **Ejercicio 1:**

Utilizando las columnas `"sexo"`, `"edad"` y `"tarifa"`, responde a las siguientes preguntas:

1. ¿Cuántos hombres y mujeres tenemos en nuestro conjunto de datos?
2. ¿Cuál es la edad más frecuente en nuestro conjunto de datos?
3. ¿Cuál es la edad más frecuente en las mujeres?
4. ¿Cuál es la edad más frecuente para los hombres?
5. ¿Cuál es el precio más común del billete?
6. ¿Es el precio del billete más común el mismo para hombres y mujeres?
"""



"""# Pre-procesamiento de nuestros datos

Ahora que tenemos una idea de en qué consiste nuestro conjunto de datos, vamos a transformarlo para poder visualizar la fase. Los tipos de actividades que podemos realizar durante el **preprocesamiento** incluyen

1. **Eliminar columnas**
2. **Enriquecer (o transformar)** un conjunto de datos, añadiendo nuevas columnas calculadas en los índices
3. **Filtrar** un subconjunto de filas o columnas de un conjunto de datos según algún criterio
4. **Indexar** un conjunto de datos
5. **Agregar** datos
6. **Ordenar** las filas de un conjunto de datos según algún criterio
7. **Fusionar** los datos
8. **Pivotear** de forma que los datos que originalmente estaban dispuestos en vertical se dispongan en horizontal (aumentando el número de columnas) o viceversa (aumentando el número de filas)

entre otros.

"""

titanic.columns

"""## **drop()**

El método .drop() asociado a un dataframe pandas devuelve una copia del mismo tras eliminar las filas o columnas indicadas. Por defecto se eliminan filas y se devuelve una copia del dataframe tras realizar la eliminación:
"""

titanic.drop(['Passenger_Id','Name','Cabin'],axis=1, inplace=True)
titanic.shape

#titanic.drop(columns = ["Name", "smoker"]).head()

# Validación nula de nuevo
titanic.isnull().sum()

titanic.head(20)

"""# **valores nulos**

Dependiendo del problema, el tratamiento de los nulos puede ser manejado de diferentes maneras:

* Mantenerlos
* Borrarlos
* Dejar un valor fijo que los diferencie
* Sustituirlos por un estadístico de resumen (media, mediana, moda)
* Rellenar hacia delante o hacia atrás
* Interpolar
"""

# borrarlos
titanic.dropna(inplace=True)
titanic.shape

# Validación nulos
titanic.isnull().sum()

"""

La función Python Pandas `DataFrame.reset_index()` restablece el índice del DataFrame dado."""



titanic.reset_index(drop=True,inplace=True)
titanic.head(10)

url= "https://drive.google.com/uc?id=1ZLtB26KdWOAGeHw3CP-Dzi43tibZIOmG"
titanic=pd.read_csv(url) #Para leer archivos en formatos xlsx, usamos pd.read_excel
titanic.drop(['PassengerId','Name','Cabin'],axis=1, inplace=True)
titanic.head(10)

titanic["Age"].mode()

titanic.fillna(titanic['Age'].mean()).head(10)

titanic['Age'].fillna(titanic['Age'].median()).head(10)

titanic['Age'].fillna(titanic['Age'].mode()[0]).head(10)

#rellena todos los valores NaN de DataFrame con el valor después del valor NaN en la misma columna.
titanic['Age'].fillna(method='backfill').head(10)

# rellena todos los valores NaN de DataFrame con el valor anterior al valor NaN en la misma columna.
titanic['Age'].fillna(method='ffill').head(10)

titanic.interpolate(method='polynomial', order=2).head(10)

"""# Codificación de variables categóricas

A veces, es útil crear una columna para cada categoría posible de una de nuestras variables categóricas. Para ello, utilizamos un método `pandas` llamado `get_dummies()`:
"""

titanic['sexDummies'] = titanic['Sex']
titanic

"""# **Método pandas.get_dummies()**"""

#Establezca prefix para cambiar el nombre por defecto de las columnas ficticias
titanic = pd.get_dummies(titanic, columns = ['sexDummies'], prefix = ['D'])
titanic.head()

"""## **Ejercicio 2:**

1. Agrupa el conjunto de datos por género (`sexo`) y calcula la edad media (`edad`).
2. Agrupar el conjunto de datos por la columna familia (`familia`) y contar el número de registros por grupo.
3. De las familias, ¿cuántas sobrevivieron y cuántas no?
"""

x = "7.6  5.4.  7.8"